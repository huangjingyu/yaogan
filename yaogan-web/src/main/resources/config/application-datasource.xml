<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!--c3p0数据库连接池配置-->
    <!--参考http://www.blogjava.net/Alpha/archive/2010/06/22/262789.html-->
    <!--
    需要根据项目设置的属性包括：driverClass，jdbcUrl，user，password，minPoolSize
    ，maxPoolSize，initialPoolSize，automaticTestTable,idleConnectionTestPeriod，
    maxIdleTime
    -->
    <bean id="dataSourceTarget" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--########## jdbc连接信息 ##########-->
        <property name="driverClass">
            <value>${datasource.db.driver}</value>
        </property>
        <property name="jdbcUrl">
            <value>${datasource.db.url}</value>
        </property>
        <property name="user">
            <value>${datasource.db.user}</value>
        </property>
        <property name="password">
            <value>${datasource.db.password}</value>
        </property>

        <!--########## 连接池微调参数，根绝项目需要调整 ##########-->
        <property name="minPoolSize">
            <value>${datasource.pool.min}</value>
        </property>
        <property name="maxPoolSize">
            <value>${datasource.pool.max}</value>
        </property>
        <!--介于minPoolSize-maxPoolSize之间的一个数-->
        <property name="initialPoolSize">
            <value>${datasource.pool.init}</value>
        </property>
         <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。default: 3 -->
        <property name="acquireIncrement">
            <value>${datasource.pool.increment}</value>
        </property>
        <!--jdbc相关的参数。用来控制数据源加载的preparedstatements的数量。
        如果maxstatements与maxstatementsperconnection均为0，则缓存被关闭。default: 0-->
        <property name="maxStatements">
            <value>0</value>
        </property>
        <!--定义在从数据库获取新连接失败后重复尝试的次数。default: 30 -->
        <property name="acquireRetryAttempts">
            <value>30</value>
        </property>
        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
        保留，并在下次调用getconnection()的时候继续尝试获取连接。如果设为true，那么在尝试
        获取连接失败后该数据源将申明已断开并永久关闭。default: false-->
        <property name="breakAfterAcquireFailure">
            <value>true</value>
        </property>
         <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
        时候都将校验其有效性。建议使用idleconnectiontestperiod或automatictesttable
        等方法来提升连接测试的性能。不建议设置为True。default: false -->
        <property name="testConnectionOnCheckout">
            <value>false</value>
        </property>

        <!--########## 处理等待时间过长连接失效问题 ##########-->
        <!--
        e.g.
        Mysql服务器默认的“wait_timeout”是8小时，也就是说一个connection空闲超过8个小时，
        Mysql将自动断开该 connection。因此必须在空闲周期内进行试探性的connect以确保connection
        有效。
        -->
        <property name="testConnectionOnCheckin">
            <value>true</value>
        </property>
        <property name="automaticTestTable">
            <value>C3P0TestTable</value>
        </property>
        <!--空闲连接测试周期,必须小于数据库服务器的连接wait_timeout时间，单位秒。18000秒是5小时-->
        <property name="idleConnectionTestPeriod">
            <value>18000</value>
        </property>
        <!--根据服务器wait_timeout设置，必须小于必须小于数据库服务器的连接wait_timeout时间。单位为秒。-->
        <property name="maxIdleTime">
            <value>25000</value>
        </property>
    </bean>

    <!--
    通过LazyConnectionDataSourceProxy取得的Connection对象是一个代理对象，
    该代理对象可以保证当Connection被使用的时候才会从LazyConnectionDataSourceProxy持有的DataSource目标对象上获取。
    它可以解决类似mysql auto_commit造成的性能问题。见http://niyunjiu.javaeye.com/blog/494179
    -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy">
        <property name="targetDataSource">
            <ref local="dataSourceTarget"/>
        </property>
    </bean>


</beans>